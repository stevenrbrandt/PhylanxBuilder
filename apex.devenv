FROM fedora:26
RUN dnf install -y gcc-c++ gcc make git \
    bzip2 hwloc-devel blas blas-devel lapack lapack-devel \
    libatomic which compat-openssl10 vim-enhanced wget zlib-devel \
    python3-flake8 gdb sudo python36 mpich-devel sqlite-devel sqlite \
    findutils openssl-devel papi papi-devel lm_sensors-devel hdf5-devel \
    libffi-devel

ARG CPUS
ARG BUILD_TYPE
WORKDIR /

ENV CMAKE_VER 3.17.0
RUN curl -LO http://www.cmake.org/files/v$(echo $CMAKE_VER|cut -d. -f1,2)/cmake-${CMAKE_VER}.tar.gz
RUN tar xzf cmake-${CMAKE_VER}.tar.gz
WORKDIR /cmake-${CMAKE_VER}
RUN ./configure && make -j ${CPUS} && make install
WORKDIR /

ENV BOOST_VER 1_74_0
WORKDIR /usr/install
COPY boost_${BOOST_VER}.tar.bz2 .
RUN tar xjf boost_${BOOST_VER}.tar.bz2
WORKDIR /usr/install/boost_${BOOST_VER}
ENV CPLUS_INCLUDE_PATH /usr/include/python3.5m
RUN bash ./bootstrap.sh
RUN ./b2 -j 5 install
WORKDIR /

RUN git clone https://github.com/BlueBrain/HighFive.git
WORKDIR /HighFive/build
RUN cmake ..
RUN make install
WORKDIR /

ENV AH_VER 4.6.0
RUN curl -kLO https://www.dyninst.org/sites/default/files/downloads/harmony/ah-${AH_VER}.tar.gz
RUN tar -xzf ah-${AH_VER}.tar.gz
WORKDIR /activeharmony-${AH_VER}
COPY activeharmony-4.6.0/code-server/code_generator.cxx code-server/code_generator.cxx
RUN make CFLAGS=-fPIC LDFLAGS=-fPIC && make install prefix=/usr/local/activeharmony

ENV OTF2_VER 2.1.1
WORKDIR /
RUN curl -kLO https://www.vi-hps.org/cms/upload/packages/otf2/otf2-${OTF2_VER}.tar.gz
RUN tar -xzf otf2-${OTF2_VER}.tar.gz
WORKDIR otf2-${OTF2_VER}
RUN ./configure --prefix=/usr/local/otf2 --enable-shared && make && make install

WORKDIR /

#RUN ln -s /usr/lib64/openmpi/lib/libmpi_cxx.so /usr/lib64/openmpi/lib/libmpi_cxx.so.1
#RUN ln -s /usr/lib64/openmpi/lib/libmpi.so /usr/lib64/openmpi/lib/libmpi.so.12
ENV PYVER 3.8.6
RUN wget https://www.python.org/ftp/python/${PYVER}/Python-${PYVER}.tgz
RUN tar xf Python-${PYVER}.tgz
WORKDIR /Python-${PYVER}
RUN ./configure
RUN make -j ${CPUS} install

# Make headers available
RUN cp /Python-${PYVER}/pyconfig.h /Python-${PYVER}/Include
RUN ln -s /Python-${PYVER}/Include /usr/include/python${PYVER}

#RUN pip3 install --trusted-host pypi.org --trusted-host files.pythonhosted.org numpy tensorflow keras pytest
RUN pip3 install numpy tensorflow keras pytest
WORKDIR /

ENV PATH /usr/lib64/mpich/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin:.
RUN git clone --depth 1 https://github.com/STEllAR-GROUP/hpx.git && \
    mkdir -p /hpx/build && \
    cd /hpx/build && \
    cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
      -DHPX_WITH_PARCELPORT_MPI=ON \
      -DHPX_WITH_MALLOC=system \
      -DHPX_WITH_MORE_THAN_64_THREADS=ON \
      -DHPX_WITH_MAX_CPU_COUNT=80 \
      -DHPX_WITH_EXAMPLES=Off \
      -DHPX_WITH_APEX=TRUE \
      -DAPEX_WITH_ACTIVEHARMONY=TRUE \
      -DACTIVEHARMONY_ROOT=/usr/local/activeharmony \
      -DAPEX_WITH_OTF2=TRUE \
      -DOTF2_ROOT=/usr/local/otf2 \
      -DAPEX_USE_CLOCK_TIMESTAMP=TRUE \
      -DAPEX_WITH_PAPI=TRUE \
      -DHPX_WITH_APEX_NO_UPDATE=TRUE \
      -DHPX_WITH_APEX_TAG=develop \
      -DAPEX_WITH_BFD=FALSE \
      .. && \
    make -j ${CPUS} install && \
    rm -f $(find . -name \*.o)

RUN git clone --depth 1 https://github.com/pybind/pybind11.git && \
    mkdir -p /pybind11/build && \
    cd /pybind11/build && \
    cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DPYBIND11_PYTHON_VERSION=${PYVER} .. && \
    make -j ${CPUS} install && \
    rm -f $(find . -name \*.o)

RUN git clone --depth 1 https://bitbucket.org/blaze-lib/blaze.git && \
    cd /blaze && \
    mkdir -p /blaze/build && \
    cd /blaze/build && \
    cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} .. && \
    make -j ${CPUS} install && \
    rm -f $(find . -name \*.o)

RUN git clone --depth 1 https://github.com/STEllAR-GROUP/blaze_tensor.git && \
    mkdir -p /blaze_tensor/build && \
    cd /blaze_tensor/build && \
    cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} .. && \
    make -j ${CPUS} install && \
    rm -f $(find . -name \*.o)

COPY build-${BUILD_TYPE}.sh /usr/local/bin/build.sh
RUN chmod +x /usr/local/bin/build.sh

RUN echo "ALL            ALL = (ALL) NOPASSWD: ALL" >> /etc/sudoers
COPY phylanx.devenv /Dockerfile
RUN useradd -m jovyan -d /home/jovyan
#RUN ln /usr/lib64/libhwloc.so /usr/lib64/libhwloc.so.5
USER jovyan
WORKDIR /home/jovyan
ENV LD_LIBRARY_PATH /home/jovyan/install/phylanx/lib64:/usr/local/lib64:/home/jovyan/install/phylanx/lib/phylanx:/usr/lib64/mpich/lib
COPY bash.sh /home/jovyan/.bashrc
CMD ["sleep","infinity"]
